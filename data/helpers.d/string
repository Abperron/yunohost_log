#!/bin/bash

# Generate a random string
#
# example: pwd=$(ynh_string_random --length=8)
#
# usage: ynh_string_random [--length=string_length]
# | arg: -l, --length - the string length to generate (default: 24)
ynh_string_random() {
    # Declare an array to define the options of this helper.
    local legacy_args=l
    declare -Ar args_array=( [l]=length= )
    local length
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    length=${length:-24}

    dd if=/dev/urandom bs=1 count=1000 2> /dev/null \
      | tr -c -d 'A-Za-z0-9' \
      | sed -n 's/\(.\{'"$length"'\}\).*/\1/p'
}

# Substitute/replace a string (or expression) by another in a file
#
# usage: ynh_replace_string --match_string=match_string --replace_string=replace_string --target_file=target_file
# | arg: -m, --match_string - String to be searched and replaced in the file
# | arg: -r, --replace_string - String that will replace matches
# | arg: -f, --target_file - File in which the string will be replaced.
#
# As this helper is based on sed command, regular expressions and
# references to sub-expressions can be used
# (see sed manual page for more information)
ynh_replace_string () {
	# Declare an array to define the options of this helper.
	local legacy_args=mrf
	declare -Ar args_array=( [m]=match_string= [r]=replace_string= [f]=target_file= )
	local match_string
	local replace_string
	local target_file
	# Manage arguments with getopts
	ynh_handle_getopts_args "$@"

	local delimit=@
	# Escape the delimiter if it's in the string.
	match_string=${match_string//${delimit}/"\\${delimit}"}
	replace_string=${replace_string//${delimit}/"\\${delimit}"}

	sudo sed --in-place "s${delimit}${match_string}${delimit}${replace_string}${delimit}g" "$target_file"
}

# Substitute/replace a special string by another in a file
#
# usage: ynh_replace_special_string --match_string=match_string --replace_string=replace_string --target_file=target_file
# | arg: -m, --match_string - String to be searched and replaced in the file
# | arg: -r, --replace_string - String that will replace matches
# | arg: -t, --target_file - File in which the string will be replaced.
#
# This helper will use ynh_replace_string, but as you can use special
# characters, you can't use some regular expressions and sub-expressions.
ynh_replace_special_string () {
	# Declare an array to define the options of this helper.
	local legacy_args=mrf
	declare -Ar args_array=( [m]=match_string= [r]=replace_string= [f]=target_file= )
	local match_string
	local replace_string
	local target_file
	# Manage arguments with getopts
	ynh_handle_getopts_args "$@"

	# Escape any backslash to preserve them as simple backslash.
	match_string=${match_string//\\/"\\\\"}
	replace_string=${replace_string//\\/"\\\\"}

	# Escape the & character, who has a special function in sed.
	match_string=${match_string//&/"\&"}
	replace_string=${replace_string//&/"\&"}

	ynh_replace_string --match_string="$match_string" --replace_string="$replace_string" --target_file="$target_file"
}
