#!/bin/bash


# Get a value from heterogeneous file (yaml, json, php, python...)
#
# usage: ynh_value_get --file=PATH --key=KEY
# | arg: -f, --file=     - the path to the file
# | arg: -k, --key=     - the key to get
#
# This helpers match several var affectation use case in several languages
# We don't use jq or equivalent to keep comments and blank space in files
# This helpers work line by line, it is not able to work correctly 
# if you have several identical keys in your files
# 
# Example of line this helpers can managed correctly
# .yml
#     title: YunoHost documentation
#     email: 'yunohost@yunohost.org'
# .json
#     "theme": "colib'ris",
#     "port": 8102
#     "some_boolean":     false,
#     "user": null
# .ini
#     some_boolean = On
#     action = "Clear"
#     port = 20
# .php
#     $user=
#     user => 20
# .py
#     USER = 8102
#     user = 'https://donate.local'
#     CUSTOM['user'] = 'YunoHost'
# Requires YunoHost version 4.3 or higher.
ynh_value_get() {
    # Declare an array to define the options of this helper.
    local legacy_args=fk
    local -A args_array=( [f]=file= [k]=key= )
    local file
    local key
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    local var_part='^[ \t]*\$?(\w*\[)?[ \t]*["'"']?${key}['"'"]?[ \t]*\]?[ \t]*[:=]>?[ \t]*'
    
    local crazy_value="$((grep -i -o -P '^[ \t]*\$?(\w*\[)?[ \t]*["'"']?${key}['"'"]?[ \t]*\]?[ \t]*[:=]>?[ \t]*\K.*(?=[ \t,\n;]*$)' ${file} || echo YNH_NULL)  | head -n1)"
    #"
    
    local first_char="${crazy_value:0:1}"
    if [[ "$first_char" == '"' ]] ; then
        echo "$crazy_value" | grep -m1 -o -P '"\K([^"](\\")?)*[^\\](?=")' | head -n1  | sed 's/\\"/"/g'
    elif [[ "$first_char" == "'" ]] ; then
        echo "$crazy_value" | grep -m1 -o -P "'\K([^'](\\\\')?)*[^\\\\](?=')" | head -n1  | sed "s/\\\\'/'/g"
    else
        echo "$crazy_value"
    fi
}

# Set a value into heterogeneous file (yaml, json, php, python...)
#
# usage: ynh_value_set --file=PATH --key=KEY --value=VALUE
# | arg: -f, --file=     - the path to the file
# | arg: -k, --key=     - the key to set
# | arg: -v, --value=     - the value to set
#
# Requires YunoHost version 4.3 or higher.
ynh_value_set() {
    # Declare an array to define the options of this helper.
    local legacy_args=fkv
    local -A args_array=( [f]=file= [k]=key= [v]=value=)
    local file
    local key
    local value
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    local var_part='^[ \t]*\$?(\w*\[)?[ \t]*["'"']?${key}['"'"]?[ \t]*\]?[ \t]*[:=]>?[ \t]*'
    
    local crazy_value="$(grep -i -o -P "${var_part}\K.*(?=[ \t,\n;]*\$)" ${file} | head -n1)"
    local var_part="^[ \t]*(\$?\w*\[)?[ \t]*[\"']?${key}[\"']?[ \t]*\]?[ \t]*[:=]>?[ \t]*"
    local first_char="${crazy_value:0:1}"
    if [[ "$first_char" == '"' ]] ; then
        value="$(echo "$value" | sed 's/"/\\"/g')"
        sed -ri "s%(${var_part}\")[^\"]*(\"[ \t\n,;]*)\$%\1${value}\2%i" ${file}
    elif [[ "$first_char" == "'" ]] ; then
        value="$(echo "$value" | sed "s/'/\\\\'/g")"
        sed -ri "s%(${var_part}')[^']*('[ \t\n,;]*)\$%\1${value}\2%i" ${file}
    else
        if [[ "$value" == *"'"* ]] || [[ "$value" == *'"'* ]] ; then
            value="\"$(echo "$value" | sed 's/"/\\"/g')\""
        fi
        sed -ri "s%(${var_part}')[^']*('[ \t\n,;]*)\$%\1${value}\2%i" ${file}
    fi
}

_ynh_panel_get() {
    # From settings
    local params_sources
    params_sources=`python3 << EOL
import toml
from collections import OrderedDict
with open("../config_panel.toml", "r") as f:
    file_content = f.read()
loaded_toml = toml.loads(file_content, _dict=OrderedDict)

for panel_name,panel in loaded_toml.items():
    if isinstance(panel, dict):
        for section_name, section in panel.items():
            if isinstance(section, dict):
                for name, param in section.items():
                    if isinstance(param, dict) and param.get('type', 'string') not in ['success', 'info', 'warning', 'danger', 'display_text', 'markdown']:
                        print("%s=%s" % (name, param.get('source', 'settings')))
EOL
`
    for param_source in $params_sources
    do
        local short_setting="$(echo $param_source | cut -d= -f1)"
        local getter="get__${short_setting}"
        local source="$(echo $param_source | cut -d= -f2)"
        sources[${short_setting}]="$source"
        file_hash[${short_setting}]=""

        # Get value from getter if exists
        if type -t $getter 2>/dev/null | grep -q '^function$' 2>/dev/null; then
            old[$short_setting]="$($getter)"
        
        # Get value from app settings or from another file
        elif [[ "$source" == "settings" ]] || [[ "$source" == *":"* ]] ; then
            if [[ "$source" == "settings" ]] ; then
                source=":/etc/yunohost/apps/$app/settings.yml"
            fi
        
            local source_key="$(echo "$source" | cut -d: -f1)"
            source_key=${source_key:-$short_setting}
            local source_file="$(echo "$source" | cut -d: -f2 | sed s@__FINALPATH__@$final_path@ | sed s/__APP__/$app/)"
            old[$short_setting]="$(ynh_value_get --file="${source_file}" --key="${source_key}")"
        
        # Specific case for files (all content of the file is the source)
        else
            
            old[$short_setting]="$(ls $source 2> /dev/null || echo YNH_NULL)"
            file_hash[$short_setting]="true"
        fi
    done
    
    
}

_ynh_panel_apply() {
    for short_setting in "${!old[@]}"
    do
        local setter="set__${short_setting}"
        local source="${sources[$short_setting]}"
        if [ "${changed[$short_setting]}" == "true" ] ; then 
            # Apply setter if exists
            if type -t $setter 2>/dev/null | grep -q '^function$' 2>/dev/null; then
                $setter

            # Copy file in right place 
            elif [[ "$source" == "settings" ]] ; then
                ynh_app_setting_set $app $short_setting "${!short_setting}"
            
            # Get value from a kind of key/value file
            elif [[ "$source" == *":"* ]]
            then
                local source_key="$(echo "$source" | cut -d: -f1)"
                source_key=${source_key:-$short_setting}
                local source_file="$(echo "$source" | cut -d: -f2 | sed s@__FINALPATH__@$final_path@ | sed s/__APP__/$app/)"
                ynh_value_set --file="${source_file}" --key="${source_key}" --value="${!short_setting}"

            # Specific case for files (all content of the file is the source)
            else
                local source_file="$(echo "$source" | sed s@__FINALPATH__@$final_path@ | sed s/__APP__/$app/)"
                cp "${!short_setting}" "$source_file"
            fi
        fi
    done
}

_ynh_panel_show() {
    for short_setting in "${!old[@]}"
    do
<<<<<<< HEAD
        if [[ "${old[$short_setting]}" != YNH_NULL ]] ; then
	        ynh_return "${short_setting}: \"${old[$short_setting]}\""
        fi
=======
        local key="YNH_CONFIG_$(ynh_lowerdot_to_uppersnake $dot_settings[$short_setting])"
	    ynh_return "$key=${old[$short_setting]}"
>>>>>>> 596d05ae81d24712c87ec0de72f8deb8248bca9a
    done
}

_ynh_panel_validate() {
<<<<<<< HEAD
=======
    set +x
>>>>>>> 596d05ae81d24712c87ec0de72f8deb8248bca9a
    # Change detection
    local is_error=true
    #for changed_status in "${!changed[@]}"
    for short_setting in "${!old[@]}"
    do
        changed[$short_setting]=false
<<<<<<< HEAD
        [ -z ${!short_setting+x} ] && continue
=======
>>>>>>> 596d05ae81d24712c87ec0de72f8deb8248bca9a
        if [ ! -z "${file_hash[${short_setting}]}" ] ; then
            file_hash[old__$short_setting]=""
            file_hash[new__$short_setting]=""
            if [ -f "${old[$short_setting]}" ] ; then
                file_hash[old__$short_setting]=$(sha256sum "${old[$short_setting]}" | cut -d' ' -f1)
            fi
<<<<<<< HEAD
            if [ -f "${!short_setting}" ] ; then
                file_hash[new__$short_setting]=$(sha256sum "${!short_setting}" | cut -d' ' -f1)
                if [[ "${file_hash[old__$short_setting]}" != "${file_hash[new__$short_setting]}" ]]
                then
                    changed[$short_setting]=true
                    is_error=false
                fi
            fi
        else
            if [[ "${!short_setting}" != "${old[$short_setting]}" ]]
=======
            if [ -f "${new[$short_setting]}" ] ; then
                file_hash[new__$short_setting]=$(sha256sum "${new[$short_setting]}" | cut -d' ' -f1)
                if [[ "${file_hash[old__$short_setting]}" != "${file_hash[new__$short_setting]}" ]]
                then
                    changed[$short_setting]=true
                fi
            fi
        else
            if [[ "${new[$short_setting]}" != "${old[$short_setting]}" ]]
>>>>>>> 596d05ae81d24712c87ec0de72f8deb8248bca9a
            then
                changed[$short_setting]=true
                is_error=false
            fi
        fi
    done
    
    # Run validation if something is changed
    if [[ "$is_error" == "false" ]]
    then

        for short_setting in "${!old[@]}"
        do
<<<<<<< HEAD
            [[ "${changed[$short_setting]}" == "false" ]] && continue
=======
>>>>>>> 596d05ae81d24712c87ec0de72f8deb8248bca9a
            local result=""
            if type -t validate__$short_setting | grep -q '^function$' 2>/dev/null; then
                result="$(validate__$short_setting)"
            fi
            if [ -n "$result" ]
            then
<<<<<<< HEAD
                local key="YNH_ERROR_${$short_setting}"
                ynh_return "$key: $result"
=======
                local key="YNH_ERROR_$(ynh_lowerdot_to_uppersnake $dot_settings[$short_setting])"
                ynh_return "$key=$result"
>>>>>>> 596d05ae81d24712c87ec0de72f8deb8248bca9a
                is_error=true
            fi
        done
    fi

    if [[ "$is_error" == "true" ]]
    then
<<<<<<< HEAD
        ynh_die ""
    fi 
=======
        ynh_die
    fi 
    set -x
>>>>>>> 596d05ae81d24712c87ec0de72f8deb8248bca9a
    
}

ynh_panel_get() {
    _ynh_panel_get
}

ynh_panel_show() {
    _ynh_panel_show
}

ynh_panel_validate() {
    _ynh_panel_validate
}

ynh_panel_apply() {
    _ynh_panel_apply
}

ynh_panel_run() {
    declare -Ag old=()
<<<<<<< HEAD
    declare -Ag changed=()
    declare -Ag file_hash=()
    declare -Ag sources=()
    
    ynh_panel_get
    case $1 in
        show) ynh_panel_get && ynh_panel_show;;
        apply) ynh_panel_get && ynh_panel_validate && ynh_panel_apply;;
=======
    declare -Ag new=()
    declare -Ag changed=()
    declare -Ag file_hash=()
    declare -Ag sources=()
    declare -Ag dot_settings=()
    
    ynh_panel_get
    case $1 in
        show) ynh_panel_show;;
        apply) ynh_panel_validate && ynh_panel_apply;;
>>>>>>> 596d05ae81d24712c87ec0de72f8deb8248bca9a
    esac
}

